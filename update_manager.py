import os
import subprocess
import sys
from tkinter import messagebox
import requests
from packaging.version import parse as parse_version



# ==============================================================================
# UPDATE MANAGER CLASS
# ==============================================================================
class UpdateManager:
    """
    L·ªõp qu·∫£n l√Ω c·∫≠p nh·∫≠t ph·∫ßn m·ªÅm:
    """

    def __init__(self):
        pass

    def check_for_updates(self, current_version, github_repo):
        """
        Ki·ªÉm tra c·∫≠p nh·∫≠t tr√™n GitHub.

        Tr·∫£ v·ªÅ:
            - M·ªôt dictionary ch·ª©a th√¥ng tin c·∫≠p nh·∫≠t n·∫øu c√≥ b·∫£n m·ªõi:
                "version_tag": latest_version_tag
                "release_info": latest_release
            - None n·∫øu kh√¥ng c√≥ b·∫£n m·ªõi ho·∫∑c c√≥ l·ªói.
        """
        try:
            print("Checking for new version in the background...")
            api_url = f"https://api.github.com/repos/{github_repo}/releases/latest"
            response = requests.get(api_url, timeout=5)
            response.raise_for_status() # G√¢y ra m·ªôt exception n·∫øu status code kh√¥ng t·ªët (4xx ho·∫∑c 5xx)

            latest_release = response.json()
            latest_version_tag = latest_release["tag_name"]
            latest_version = latest_version_tag.lstrip('v') # X√≥a ti·ªÅn t·ªë 'v' n·∫øu c√≥

            if parse_version(latest_version) > parse_version(current_version):
                print(f"Update found: {latest_version_tag}")
                # Tr·∫£ v·ªÅ th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ file main x·ª≠ l√Ω
                return {
                    "version_tag": latest_version_tag,
                    "release_info": latest_release
                }
            else:
                print("You are using the latest version.")
                return None
                
        except requests.exceptions.RequestException as e:
            # X·ª≠ l√Ω c√°c l·ªói li√™n quan ƒë·∫øn request (v√≠ d·ª•: l·ªói m·∫°ng, timeout)
            print(f"Error checking for updates (network issue): {e}")
            return None
        except Exception as e:
            # X·ª≠ l√Ω c√°c l·ªói ti·ªÅm ·∫©n kh√°c (v√≠ d·ª•: ph√¢n t√≠ch JSON, l·ªói key)
            print(f"An unexpected error occurred while checking for updates: {e}")
            return None

    def perform_update(self, release_info, app_name=None, is_exit_app=True):
        """
        H√†m n√†y ch·ª©a logic g·ªçi updater.exe ƒë·ªÉ th·ª±c hi·ªán c·∫≠p nh·∫≠t.
        N√≥ s·∫Ω ƒë∆∞·ª£c g·ªçi b·ªüi main.py sau khi ng∆∞·ªùi d√πng ƒë·ªìng √Ω.
        Args:
            release_info: th√¥ng tin b·∫£n release
            app_name: t√™n file kh√°c c·∫ßn update, n·∫øu None: l√† ch√≠nh app ƒëang ch·∫°y
            is_exit_app: True: t·∫Øt app, ƒë·ª£i update xong th√¨ kh·ªüi ƒë·ªông l·∫°i app
                        False: kh√¥ng t·∫Øt app, nh∆∞ng ph·∫£i ƒë·ª£i update xong m·ªõi ti·∫øp t·ª•c app
        """
        try:
            if not release_info.get("assets"):
                messagebox.showerror("Error", "Update file not found in the new release!")
                return

            asset = release_info["assets"][0]
            download_url = asset["browser_download_url"]

            if getattr(sys, 'frozen', False):
                app_path = os.path.basename(sys.executable)
            else:
                app_path = os.path.basename(os.path.abspath(sys.argv[0]))

            app_dir = os.path.dirname(app_path)

            # T√¨m updater.exe trong th∆∞ m·ª•c g·ªëc v√† th∆∞ m·ª•c con
            updater_path = self._find_file("updater.exe")

            if app_name:
                target_path = self._find_file(app_name)
                if not target_path:
                    target_path = os.path.join(app_dir, app_name)
            else: # ch∆∞a vi·∫øt h√†m ki·ªÉm tra file g·ªçi t·ª´ file py kh√¥ng ƒë·ªÉ x·ª≠ l√Ω kh√¥ng b·ªã l·ªói thay th·∫ø file py
                target_path = app_path

            # N·∫øu t√¨m th·∫•y th√¨ g·ªçi updater, ng∆∞·ª£c l·∫°i b√°o l·ªói
            if updater_path:
                print(f"‚úÖ Updater found: {updater_path}")
                print("üöÄ Calling updater to perform the update...")
                if is_exit_app:
                    subprocess.Popen([updater_path, target_path, download_url])
                    sys.exit()
                else:
                    # subprocess.run s·∫Ω ƒë·ª£i ti·∫øn tr√¨nh con ho√†n th√†nh
                    subprocess.run([updater_path, target_path, download_url], check=True)
            else:
                print("‚ùå updater.exe not found!")
                messagebox.showerror("Update Error", "'updater.exe' not found to perform the update.")
                
        except Exception as e:
            messagebox.showerror("Update Error", f"An error occurred during the update process: {e}")
    
    def _find_file(self, file_name):
        """
        T√¨m ki·∫øm m·ªôt file trong th∆∞ m·ª•c g·ªëc c·ªßa ·ª©ng d·ª•ng v√† c√°c th∆∞ m·ª•c con.
        H√†m n√†y gi·ªù ƒë·ªôc l·∫≠p v√† kh√¥ng c·∫ßn config.
        """
        
        if getattr(sys, 'frozen', False):
            app_dir = os.path.dirname(sys.executable)
        else:
            app_dir = os.path.dirname(os.path.abspath(sys.argv[0]))

        for root, dirs, files in os.walk(app_dir):
            if file_name in files:
                return os.path.join(root, file_name)
        return None