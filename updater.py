import sys
import os
import time
import urllib.request
import shutil
import subprocess
import traceback

def wait_for_app_exit(app_path, timeout=10):
    """Ch·ªù file th·ª±c thi kh√¥ng c√≤n b·ªã kh√≥a."""
    print("‚è≥ ƒêang ch·ªù ·ª©ng d·ª•ng ch√≠nh tho√°t...")
    for _ in range(timeout):
        try:
            os.rename(app_path, app_path)
            print("‚úÖ ·ª®ng d·ª•ng ch√≠nh ƒë√£ tho√°t.")
            return True
        except PermissionError:
            time.sleep(1)
        except FileNotFoundError:
            print("‚úÖ ·ª®ng d·ª•ng ch√≠nh ƒë√£ tho√°t (kh√¥ng t√¨m th·∫•y file).")
            return True
    print("‚ùå ·ª®ng d·ª•ng ch√≠nh ch∆∞a tho√°t sau 10 gi√¢y.")
    return False

def download_file(url, output_path):
    """T·∫£i file t·ª´ URL v·ªõi thanh ti·∫øn tr√¨nh."""
    def print_progress_bar(percent, downloaded, total_size, bar_width=20):
        filled = int(percent / 100 * bar_width)
        bar = '‚ñà' * filled + '‚ñè' + ' ' * (bar_width - filled - 1)
        downloaded_mb = downloaded / (1024 * 1024)
        total_mb = total_size / (1024 * 1024)
        print(f"\rüì• T·∫£i: [{bar}] {percent:5.1f}% ({downloaded_mb:.2f}MB / {total_mb:.2f}MB)", end='', flush=True)

    print(f"üåê T·∫£i v·ªÅ t·ª´: {url}")
    try:
        with urllib.request.urlopen(url) as response, open(output_path, 'wb') as out_file:
            total_size = int(response.info().get('Content-Length', 0))
            downloaded = 0
            block_size = 8192
            while True:
                buffer = response.read(block_size)
                if not buffer:
                    break
                out_file.write(buffer)
                downloaded += len(buffer)
                if total_size:
                    percent = downloaded * 100 / total_size
                    print_progress_bar(percent, downloaded, total_size)
        print("\n‚úÖ T·∫£i xong.")
        return True
    except Exception as e:
        print(f"\n‚ùå L·ªói khi t·∫£i file: {e}")
        return False

def replace_file(target_path, new_file_path, backup=True, restart=False):
    """Thay th·∫ø file ƒë√≠ch b·∫±ng file m·ªõi."""
    backup_path = target_path + ".backup"
    try:
        if backup and os.path.exists(target_path):
            print(f"üîê Sao l∆∞u '{os.path.basename(target_path)}'...")
            if os.path.exists(backup_path): os.remove(backup_path)
            os.rename(target_path, backup_path)

        print(f"‚ôªÔ∏è Ghi ƒë√® '{os.path.basename(target_path)}'...")
        shutil.move(new_file_path, target_path)

        if restart:
            print(f"üöÄ Kh·ªüi ƒë·ªông l·∫°i '{os.path.basename(target_path)}'...")
            process = subprocess.Popen([target_path])
            time.sleep(3)
            if process.poll() is not None:
                print(f"‚ùå '{os.path.basename(target_path)}' m·ªõi b·ªã crash! ƒêang kh√¥i ph·ª•c...")
                if os.path.exists(backup_path):
                    os.remove(target_path)
                    os.rename(backup_path, target_path)
                    subprocess.Popen([target_path])
                return False

        # 4. D·ªçn d·∫πp file backup sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
        #    Logic n√†y gi·ªù ƒë√£ n·∫±m ngo√†i kh·ªëi `if restart`
        if backup and os.path.exists(backup_path):
            print(f"üßπ D·ªçn d·∫πp file backup...")
            os.remove(backup_path)

        print(f"‚úÖ C·∫≠p nh·∫≠t '{os.path.basename(target_path)}' th√†nh c√¥ng.")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng khi thay th·∫ø: {e}")
        if backup and os.path.exists(backup_path):
            print("‚Ü©Ô∏è ƒêang c·ªë g·∫Øng kh√¥i ph·ª•c b·∫£n c≈©...")
            if os.path.exists(target_path): os.remove(target_path)
            os.rename(backup_path, target_path)
            if restart: subprocess.Popen([target_path])
        return False
    
def terminate_process(process_name):
    """
    Bu·ªôc m·ªôt ti·∫øn tr√¨nh ph·∫£i t·∫Øt b·∫±ng t√™n c·ªßa n√≥.
    
    Args:
        process_name (str): T√™n c·ªßa file th·ª±c thi (v√≠ d·ª•: "msedgedriver.exe").
    """
    try:
        print(f"ƒêang t√¨m v√† t·∫Øt ti·∫øn tr√¨nh: {process_name}...")
        # L·ªánh taskkill c·ªßa Windows:
        # /F: Bu·ªôc t·∫Øt (Force)
        # /IM: Ch·ªâ ƒë·ªãnh t√™n ti·∫øn tr√¨nh (Image Name)
        # /T: T·∫Øt c·∫£ c√°c ti·∫øn tr√¨nh con
        command = ["taskkill", "/F", "/IM", process_name, "/T"]
        
        # Ch·∫°y l·ªánh v√† ·∫©n c·ª≠a s·ªï d√≤ng l·ªánh
        result = subprocess.run(command, capture_output=True, text=True, check=False)
        
        if result.returncode == 0:
            print(f"‚úÖ ƒê√£ t·∫Øt th√†nh c√¥ng {process_name}.")
        elif "process not found" in result.stderr.lower():
            print(f"‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y ti·∫øn tr√¨nh {process_name} ƒëang ch·∫°y.")
        else:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫Øt {process_name}. L·ªói: {result.stderr}")
            
    except FileNotFoundError:
        print("L·ªói: Kh√¥ng t√¨m th·∫•y l·ªánh 'taskkill'. ƒê√¢y kh√¥ng ph·∫£i l√† m√¥i tr∆∞·ªùng Windows.")
    except Exception as e:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫Øt ti·∫øn tr√¨nh: {e}")

def main():
    if len(sys.argv) != 3:
        print("L·ªói c√∫ ph√°p! C√°ch d√πng: updater.exe <path_to_target> <download_url>")
        sys.exit(1)

    target_path = sys.argv[1]
    download_url = sys.argv[2]
    temp_file = target_path + ".new"
    
    # T·ª± ƒë·ªông quy·∫øt ƒë·ªãnh logic d·ª±a tr√™n t√™n file
    is_driver_update = os.path.basename(target_path).lower() == 'msedgedriver.exe'

    try:
        # T·∫£i file m·ªõi tr∆∞·ªõc
        if not download_file(download_url, temp_file):
            print("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i do kh√¥ng th·ªÉ t·∫£i file.")
            sys.exit(1)

        if is_driver_update:
            print("\n=== B·∫ÆT ƒê·∫¶U C·∫¨P NH·∫¨T MS EDGEDRIVER ===")
            terminate_process(os.path.basename(target_path))
            replace_file(target_path, temp_file, backup=True, restart=False)
        else:
            print("\n=== B·∫ÆT ƒê·∫¶U C·∫¨P NH·∫¨T ·ª®NG D·ª§NG CH√çNH ===")
            if not wait_for_app_exit(target_path):
                #  print("‚ö†Ô∏è ·ª®ng d·ª•ng ch∆∞a tho√°t, t·∫Øt ti·∫øn tr√¨nh.")
                 terminate_process(os.path.basename(target_path))

            replace_file(target_path, temp_file, backup=True, restart=True)     
    
    except Exception as err:
        print(f"\n‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i v·ªõi l·ªói kh√¥ng x√°c ƒë·ªãnh:")
        traceback.print_exc()
        sys.exit(1)
    finally:
        # Lu√¥n d·ªçn d·∫πp file t·∫°m sau khi k·∫øt th√∫c
        if os.path.exists(temp_file):
            os.remove(temp_file)

if __name__ == "__main__":
    main()