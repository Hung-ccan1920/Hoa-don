from collections import defaultdict

from selenium import webdriver
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.edge.options import Options as EdgeOptions
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from webdriver_manager.microsoft import EdgeChromiumDriverManager
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.firefox import GeckoDriverManager
import webbrowser

import tkinter as tk
from tkinter import ttk
from tkinter import messagebox, filedialog

from lxml import etree

import os

import google.generativeai as genai

import PIL.Image

import fitz 

from datetime import datetime

import glob

import sys

import shutil
import winreg

import requests
import subprocess
from packaging.version import parse as parse_version

import re


GE_MODEL = "gemini-2.0-flash"
key_count = 0
api_key = None

def check_for_updates(current_version, github_repo):
    """
    Ki·ªÉm tra c·∫≠p nh·∫≠t tr√™n GitHub.
    Tr·∫£ v·ªÅ:
        - M·ªôt dictionary ch·ª©a th√¥ng tin c·∫≠p nh·∫≠t n·∫øu c√≥ b·∫£n m·ªõi.
        - None n·∫øu kh√¥ng c√≥ b·∫£n m·ªõi ho·∫∑c c√≥ l·ªói.
    """
    try:
        print("ƒêang ki·ªÉm tra phi√™n b·∫£n m·ªõi ·ªü ch·∫ø ƒë·ªô n·ªÅn...")
        api_url = f"https://api.github.com/repos/{github_repo}/releases/latest"
        response = requests.get(api_url, timeout=5)
        response.raise_for_status()

        latest_release = response.json()
        latest_version_tag = latest_release["tag_name"]
        latest_version = latest_version_tag.lstrip('v')

        if parse_version(latest_version) > parse_version(current_version):
            print(f"ƒê√£ t√¨m th·∫•y b·∫£n c·∫≠p nh·∫≠t: {latest_version_tag}")
            # Tr·∫£ v·ªÅ th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ file main.py x·ª≠ l√Ω
            return {
                "version_tag": latest_version_tag,
                "release_info": latest_release
            }
        else:
            print("B·∫°n ƒëang d√πng phi√™n b·∫£n m·ªõi nh·∫•t.")
            return None
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra c·∫≠p nh·∫≠t: {e}")
        return None

def perform_update(release_info, app_name=None, is_exit_app=True):
    """
    H√†m n√†y ch·ª©a logic g·ªçi updater.exe ƒë·ªÉ th·ª±c hi·ªán c·∫≠p nh·∫≠t.
    N√≥ s·∫Ω ƒë∆∞·ª£c g·ªçi b·ªüi main.py sau khi ng∆∞·ªùi d√πng ƒë·ªìng √Ω.
    Args:
        release_info: th√¥ng tin b·∫£n release
        app_name: t√™n file kh√°c c·∫ßn update, n·∫øu None: l√† ch√≠nh app ƒëang ch·∫°y
        is_exit_app: True: t·∫Øt app, ƒë·ª£i update xong th√¨ kh·ªüi ƒë·ªông l·∫°i app
                     False: kh√¥ng t·∫Øt app, nh∆∞ng ph·∫£i ƒë·ª£i update xong m·ªõi ti·∫øp t·ª•c app
    """
    try:
        if not release_info.get("assets"):
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file c·∫≠p nh·∫≠t trong b·∫£n ph√°t h√†nh m·ªõi!")
            return

        asset = release_info["assets"][0]
        download_url = asset["browser_download_url"]

        app_path = get_app_path()
        app_dir = os.path.dirname(app_path)

        # T√¨m updater.exe trong th∆∞ m·ª•c g·ªëc v√† th∆∞ m·ª•c con
        updater_path = find_file(app_dir, "updater.exe")

        if app_name:
            target_path = find_file(app_dir, app_name)
            if not target_path:
                target_path = os.path.join(app_dir, app_name)
        else:# ch∆∞a vi·∫øt h√†m ki·ªÉm tra file g·ªçi t·ª´ file py kh√¥ng ƒë·ªÉ x·ª≠ l√Ω kh√¥gn b·ªã l·ªói thay th·∫ø file py
            target_path = app_path

        # N·∫øu t√¨m th·∫•y th√¨ g·ªçi updater, ng∆∞·ª£c l·∫°i b√°o l·ªói
        if updater_path:
            print(f"‚úÖ T√¨m th·∫•y updater: {updater_path}")
            print("üöÄ ƒêang g·ªçi updater ƒë·ªÉ c·∫≠p nh·∫≠t...")
            if is_exit_app:
                subprocess.Popen([updater_path, target_path, download_url])
                sys.exit()
            else:
                subprocess.run([updater_path, target_path, download_url])
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y updater.exe!")
            messagebox.showerror("L·ªói c·∫≠p nh·∫≠t", "Kh√¥ng t√¨m th·∫•y 'updater.exe' ƒë·ªÉ th·ª±c hi·ªán c·∫≠p nh·∫≠t.")
    except Exception as e:
        messagebox.showerror("L·ªói C·∫≠p Nh·∫≠t", f"L·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t: {e}")


def manage_config_file(require_list):
    '''
    H√†m ki·ªÉm tra v√† b·∫Øt c·∫≠p nh·∫≠t th√¥ng tin trong file config.
    require_list: list c√°c key y√™u c·∫ßu.
    '''
    config_path = find_file('config.txt')

    if not (os.path.exists(config_path)) or ':' not in open(config_path, 'r', encoding='utf-8').read() :
        with open(config_path, 'w', encoding='utf-8') as file:
            for require in require_list:
                file.write(f'{require}:\n')

    with open(config_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()

    missing_data = []
    line_indices = []
    for i, line in enumerate(lines):
        if ':' in line:
            key, value = line.split(':', 1)
            if not value.strip():
                missing_data.append(key.strip())
                line_indices.append(i)

    if not missing_data:
        return

    # T·∫°o c·ª≠a s·ªï giao di·ªán ch√≠nh
    window = tk.Tk()
    window.title("C·∫≠p nh·∫≠t file config")
    window.geometry(window_center_position(350, 200)) 
    window.config(bg="#2e2e2e")
    window.resizable(False, False)
    window.attributes('-topmost', True) # Gi·ªØ c·ª≠a s·ªï lu√¥n ·ªü tr√™n

    def on_closing():
    # Hi·ªÉn th·ªã h·ªôp tho·∫°i h·ªèi x√°c nh·∫≠n
        window.destroy()
        sys.exit() # Tho√°t ho√†n to√†n ·ª©ng d·ª•ng

    # G·∫Øn h√†m on_closing v·ªõi s·ª± ki·ªán nh·∫•n n√∫t 'X' tr√™n thanh ti√™u ƒë·ªÅ
    window.protocol("WM_DELETE_WINDOW", on_closing)
    style = ttk.Style(window)
    style.theme_use("clam")

    # Style cho Frame n·ªÅn
    style.configure("TFrame", background="#2e2e2e")

    # Style cho n√∫t l·ªõn (copy t·ª´ m√†n h√¨nh ch√≠nh c·ªßa b·∫°n)
    style.configure("Dark.TButton",
                    background="#444444",
                    foreground="white",
                    font=("Arial", 10, "bold"),
                    borderwidth=2,
                    padding=10,
                    relief="raised")
    style.map("Dark.TButton",
              background=[("active", "#555555")],
              relief=[("pressed", "sunken")])

    # Style m·ªõi cho c√°c n√∫t nh·ªè "H∆∞·ªõng d·∫´n" v√† "..."
    style.configure("Small.TButton",
                    font=("Arial", 8, "bold"),
                    padding=(2, 2)) # Padding nh·ªè h∆°n
    style.map("Small.TButton",
              background=[("active", "#555555"), ('!disabled', '#444444')],
              foreground=[('!disabled', 'white')],
              relief=[("pressed", "sunken")])


    def update_values():
        all_filled = True
        for i, entry in enumerate(entry_widgets):
            if not entry.get().strip():
                messagebox.showwarning("C·∫£nh b√°o", f"Gi√° tr·ªã cho '{missing_data[i]}' kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                all_filled = False
                break 
        
        if all_filled:
            for i, entry in enumerate(entry_widgets):
                new_value = entry.get().strip()
                lines[line_indices[i]] = f"{missing_data[i]}: {new_value}\n"
            
            with open(config_path, 'w', encoding='utf-8') as file:
                file.writelines(lines)
            
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t file config th√†nh c√¥ng!")
            window.destroy()

    def open_api_guide():
        video_path = find_file('Get API key.mp4')
        if video_path:
            try:
                webbrowser.open(video_path)
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü file video: {e}")
        else:
            messagebox.showwarning("Kh√¥ng t√¨m th·∫•y", f"Kh√¥ng t√¨m th·∫•y file 'Get API key.mp4' trong th∆∞ m·ª•c ·ª©ng d·ª•ng.")

    def choose_excel_file(entry_widget):
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file Excel",
            filetypes=[("Excel files", "*.xlsx *.xls")]
        )
        if file_path:
            entry_widget.delete(0, tk.END)
            entry_widget.insert(0, file_path)

    tk.Label(window, text="Vui l√≤ng nh·∫≠p c√°c gi√° tr·ªã c√≤n thi·∫øu:", fg="white", bg="#2e2e2e", font=("Arial", 12)).pack(pady=(10, 5))

    entry_widgets = []
    for key in missing_data:
        # Thay th·∫ø tk.Frame b·∫±ng ttk.Frame ƒë·ªÉ ƒë·ªìng b·ªô style
        frame = ttk.Frame(window, style="TFrame")
        frame.pack(pady=5, fill="x", padx=15)

        tk.Label(frame, text=f"{key}:", fg="white", bg="#2e2e2e", font=("Arial", 10), width=15, anchor="w").pack(side="left")
        
        choose_button = None
        
        # 1. N·∫øu l√† API key, th√™m n√∫t "H∆∞·ªõng d·∫´n" (s·ª≠ d·ª•ng ttk.Button)
        if 'api' in key.lower():
            guide_button = ttk.Button(frame, text="?", style="Small.TButton", width=3, command=open_api_guide)
            guide_button.pack(side="right", padx=(5, 0))

        # 2. N·∫øu l√† Excel, th√™m n√∫t "..." ƒë·ªÉ ch·ªçn file (s·ª≠ d·ª•ng ttk.Button)
        elif 'excel' in key.lower():
            choose_button = ttk.Button(frame, text="...", style="Small.TButton", width=3)
            choose_button.pack(side="right", padx=(5, 0))
        
        # C·∫£i thi·ªán giao di·ªán √¥ nh·∫≠p li·ªáu cho ph√π h·ª£p
        entry = tk.Entry(frame, font=("Arial", 10), bg="#555555", fg="white", insertbackground="white", relief="solid", borderwidth=1)
        entry.pack(side="left", expand=True, fill="x")
        entry_widgets.append(entry)
        
        if choose_button:
             choose_button.config(command=lambda e=entry: choose_excel_file(e))

    # N√∫t ch√≠nh s·ª≠ d·ª•ng style "Dark.TButton" (s·ª≠ d·ª•ng ttk.Button)
    ttk.Button(
        window,
        command=update_values,
        text="Save",
        style="Dark.TButton"
    ).pack(pady=20)

    window.mainloop()

def config_file_value(key) -> list:
    """H√†m truy xu·∫•t th√¥ng tin trong file config theo key."""

    if not key:
        raise ValueError("Key kh√¥ng ƒë∆∞·ª£c r·ªóng.")

    try:
        with open('config.txt', 'r', encoding='utf-8') as config_file:
            for line in config_file:
                if key.lower() in line.lower():
                    if ":" in line:
                        # S·ª≠ d·ª•ng list comprehension ƒë·ªÉ r√∫t g·ªçn code
                        return [value.strip() for value in line.split(":", 1)[1].strip().split(',')]
        # T√¨m kh√¥ng th·∫•y tr·∫£ v·ªÅ none
        return None
    except FileNotFoundError:
        messagebox.showerror('L·ªói', f"Kh√¥ng t√¨m th·∫•y file config: config.txt")
    except Exception as e:
        messagebox.showerror('L·ªói', f"L·ªói khi ƒë·ªçc file config: {e}")

    return []  # Tr·∫£ v·ªÅ list r·ªóng n·∫øu kh√¥ng t√¨m th·∫•y key

def write_config_file (key, value):
    '''H√†m ghi gi√° tr·ªã v√†o file config theo key'''

    # ƒê·ªçc t·∫•t c·∫£ c√°c d√≤ng t·ª´ file config v√†o m·ªôt danh s√°ch
    with open('config.txt', 'r', encoding='utf-8') as f:
        lines = f.readlines()

    # T√¨m v√† c·∫≠p nh·∫≠t d√≤ng ch·ª©a key
    found = False
    for i, line in enumerate(lines):
        # D√πng .strip() v√† .lower() ƒë·ªÉ linh ho·∫°t h∆°n
        if line.strip().lower().startswith(f'{key.strip().lower()}:'):
            lines[i] = f'{key}: {value}\n'
            found = True
            break
    
    # N·∫øu kh√¥ng t√¨m th·∫•y key, th√™m n√≥ v√†o cu·ªëi
    if not found:
         lines.append(f'{key}: {value}\n')

    # Ghi l·∫°i to√†n b·ªô n·ªôi dung ƒë√£ c·∫≠p nh·∫≠t v√†o file
    with open('config.txt', 'w', encoding='utf-8') as f:
        f.writelines(lines)

def window_center_position(width, height)->str:
    window = tk.Tk()
    window.withdraw()

    # L·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()

    # T√≠nh to√°n v·ªã tr√≠ ƒë·ªÉ c·ª≠a s·ªï ·ªü gi·ªØa m√†n h√¨nh
    x_pos = (screen_width // 2) - (width // 2)
    y_pos = (screen_height // 2) - (height // 2)

    window.destroy()
    
    return(f"{width}x{height}+{x_pos}+{y_pos}")

def AI_generate_content(prompt, file, isPNG) ->str:
    '''H√†m kh·ªüi t·∫°o v√† truy c·∫≠p AI, h·∫øt h·∫°n m·ª©c s·∫Ω ƒë·ªïi key kh√°c 
    prompt: c√¢u l·ªánh y√™u c·∫ßu AI th·ª±c thi
    file: file ƒë·ªÉ g·ª≠i cho AI
    isPNG: true: file ·∫£nh, false: file pdf
    '''
    global api_key
    if not api_key:
        api_key = config_file_value('API key')

    while True: 
        try:
            global key_count 
            if key_count == len(api_key):
                return ''
            
            model = genai.GenerativeModel(model_name=GE_MODEL)

            genai.configure(api_key=api_key[key_count])

            if file == None:
                return model.generate_content(prompt).text
            else: 
                if isPNG:
                    with PIL.Image.open(file) as image_file:
                        return model.generate_content([prompt, image_file]).text
                else:
                    return model.generate_content([prompt, genai.upload_file(file)]).text
                break
        except Exception as e:
            # messagebox.showerror("L·ªói AI_generate_content", f'h·∫øt key {key_count}')
            # window.iconify()
            key_count += 1
            # return  # Tho√°t kh·ªèi h√†m ngay l·∫≠p t·ª©c, kh√¥ng th·ª±c hi·ªán c√°c d√≤ng m√£ sau

def find_firefox_executable():
    """
    T·ª± ƒë·ªông t√¨m ƒë∆∞·ªùng d·∫´n ƒë·∫øn file firefox.exe b·∫±ng c√°ch ki·ªÉm tra c√°c v·ªã tr√≠
    ph·ªï bi·∫øn, AppData c·ªßa ng∆∞·ªùi d√πng v√† ƒë·ªçc t·ª´ Windows Registry.
    """
    # 1. D√πng shutil.which (ƒë∆°n gi·∫£n, nhanh nh·∫•t)
    path = shutil.which('firefox')
    if path:
        return path

    # 2. T√¨m trong th∆∞ m·ª•c AppData\Local c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    try:
        local_app_data = os.environ.get('LOCALAPPDATA')
        if local_app_data:
            firefox_appdata_path = os.path.join(local_app_data, 'Mozilla Firefox', 'firefox.exe')
            if os.path.exists(firefox_appdata_path):
                return firefox_appdata_path
    except Exception:
        pass # B·ªè qua n·∫øu c√≥ l·ªói v√† th·ª≠ c√°ch ti·∫øp theo

    # 3. T√¨m trong Windows Registry (ƒë√°ng tin c·∫≠y cho c√°c b·∫£n c√†i ƒë·∫∑t chu·∫©n)
    try:
        key_path = r"SOFTWARE\Mozilla\Mozilla Firefox"
        with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path) as key:
            sub_key_name = winreg.EnumKey(key, 0)
            with winreg.OpenKey(key, sub_key_name) as sub_key:
                return winreg.QueryValueEx(sub_key, 'PathToExe')[0]
    except FileNotFoundError:
        try:
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path) as key:
                sub_key_name = winreg.EnumKey(key, 0)
                with winreg.OpenKey(key, sub_key_name) as sub_key:
                    return winreg.QueryValueEx(sub_key, 'PathToExe')[0]
        except FileNotFoundError:
            return None
    except Exception:
        return None
    
    return None

def initialize_web_driver(window, label):
    def show_webdriver_error_dialog():
        """
        Phi√™n b·∫£n ƒë∆°n gi·∫£n h√≥a: Hi·ªÉn th·ªã h·ªôp tho·∫°i Dark Mode, vƒÉn b·∫£n t·ª± ƒë·ªông
        xu·ªëng d√≤ng, c√≥ hyperlink v√† n√∫t b·∫•m ƒë·ªÉ M·ªû TRANG WEB.
        """
        dialog = tk.Toplevel()
        dialog.title("L·ªói")
        dialog.configure(bg="#2e2e2e")
        dialog.resizable(False, False)

        # --- Thi·∫øt l·∫≠p Dark Mode Style ---
        style = ttk.Style(dialog)
        style.theme_use('clam')
        style.configure(".", background="#2e2e2e", foreground="white", borderwidth=0)
        style.configure("TLabel", font=("Arial", 10))
        style.configure("TButton", background="#444444", foreground="white", font=("Arial", 10, "bold"), padding=5)
        style.map("TButton",
                background=[("active", "#555555"), ("pressed", "#333333")])

        # --- URL ƒë·ªÉ m·ªü ---
        webdriver_url = "https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/"

        # --- Widget Text cho th√¥ng b√°o ---
        text_widget = tk.Text(dialog, height=2, wrap='word',
                            background="#2e2e2e", foreground="white",
                            relief="flat", borderwidth=0, highlightthickness=0,
                            font=("Arial", 10))
        text_widget.pack(padx=20, pady=(20, 10))

        # Ch√®n c√°c ph·∫ßn c·ªßa vƒÉn b·∫£n
        text_widget.insert("1.0", "L·ªói Web driver, vui l√≤ng truy c·∫≠p ")
        link_start_index = text_widget.index(tk.END + "-1c")
        text_widget.insert(tk.END, "Microsoft Edge WebDriver")
        link_end_index = text_widget.index(tk.END + "-1c")
        text_widget.insert(tk.END, " ƒë·ªÉ t·∫£i phi√™n b·∫£n m·ªõi nh·∫•t v√† gi·∫£i n√©n v√†o th∆∞ m·ª•c ch·ª©a ph·∫ßn m·ªÅm.")

        # T·∫°o tag cho hyperlink
        text_widget.tag_configure("hyperlink", foreground="#66b3ff", underline=True)
        text_widget.tag_add("hyperlink", link_start_index, link_end_index)

        # --- THAY ƒê·ªîI CH√çNH: H√ÄM CH·ªà M·ªû WEB ---
        def open_website(event=None):
            webbrowser.open_new_tab(webdriver_url)

        # G√°n s·ª± ki·ªán cho hyperlink
        text_widget.tag_bind("hyperlink", "<Enter>", lambda e: text_widget.config(cursor="hand2"))
        text_widget.tag_bind("hyperlink", "<Leave>", lambda e: text_widget.config(cursor=""))
        text_widget.tag_bind("hyperlink", "<Button-1>", open_website)

        # V√¥ hi·ªáu h√≥a vi·ªác ch·ªânh s·ª≠a tr√™n widget Text
        text_widget.config(state="disabled")

        # --- Khung ch·ª©a c√°c n√∫t b·∫•m ---
        button_frame = ttk.Frame(dialog, style="TFrame")
        button_frame.pack(padx=20, pady=(10, 20), fill="x")

        # T·∫°o n√∫t OK v√† n√∫t M·ªü Web
        ok_button = ttk.Button(button_frame, text="OK", command=dialog.destroy)
        open_button = ttk.Button(button_frame, text="M·ªü Web", command=open_website) # ƒê·ªïi t√™n v√† ch·ª©c nƒÉng

        ok_button.pack(side="right", padx=(10, 0))
        open_button.pack(side="right") # ƒê·∫∑t n√∫t M·ªü Web v√†o

        # --- CƒÉn gi·ªØa v√† hi·ªÉn th·ªã c·ª≠a s·ªï ---
        dialog.update_idletasks()
        dialog.geometry(window_center_position(dialog.winfo_width(), dialog.winfo_height()))

        dialog.transient()
        dialog.grab_set()
        dialog.focus_set()
        dialog.wait_window()

    """
    H√†m kh·ªüi t·∫°o ch√≠nh, th·ª≠ t·∫•t c·∫£ c√°c ph∆∞∆°ng ph√°p theo th·ª© t·ª± ∆∞u ti√™n.
    """
    print("--- B·∫Øt ƒë·∫ßu quy tr√¨nh kh·ªüi t·∫°o WebDriver ---")

    update_label(window,label,'\n Kh·ªüi t·∫°o Edge (manual):')
    # 1. S·ª≠ d·ª•ng file msedgedriver.exe c·ª•c b·ªô
    try:
        print("‚ñ∂Ô∏è [1/4] Th·ª≠ t√¨m file msedgedriver.exe c·ª•c b·ªô...")

        found_path = find_file( 'msedgedriver.exe')

        # Gi√° tr·ªã m·∫∑c ƒë·ªãnh version = 0 ƒë·ªÉ t·∫£i phi√™n b·∫£n m·ªõi nh·∫•t
        driver_ver = '0'
        if found_path:
            # Ki·ªÉm tra version
            version_output = subprocess.check_output([found_path, "--version"], universal_newlines=True)

            # T√¨m ki·∫øm phi√™n b·∫£n trong chu·ªói output
            match = re.search(r'\d+\.\d+\.\d+\.\d+', version_output)

            # Ki·ªÉm tra xem c√≥ t√¨m th·∫•y kh√¥ng
            if match:
                # N·∫øu t√¨m th·∫•y, l·∫•y chu·ªói phi√™n b·∫£n ra b·∫±ng .group(0)
                driver_ver = match.group(0) 


        release_info= check_for_updates(driver_ver,'Hung-ccan1920/msedgedriver')

        if release_info:
            perform_update(release_info['release_info'],'msedgedriver.exe',False)

        # T√¨m l·∫°i 
        found_path = find_file( 'msedgedriver.exe')

        service = EdgeService(executable_path=found_path)
        options = EdgeOptions()
        options.add_argument("--start-maximized")
        driver = webdriver.Edge(service=service, options=options)
        update_label(window,label,' Th√†nh c√¥ng!')
        print("‚úÖ Th√†nh c√¥ng! S·ª≠ d·ª•ng Edge t·ª´ file c·ª•c b·ªô.")
        return driver
    except Exception as e:
        print(f"‚ö†Ô∏è Th·∫•t b·∫°i v·ªõi file Edge c·ª•c b·ªô: {e}")

    update_label(window,label,' Th·∫•t b·∫°i!')
    update_label(window,label,'\n Kh·ªüi t·∫°o Edge (automatic):')

    # 2. Th·ª≠ Edge t·ª± ƒë·ªông
    try:
        print("‚ñ∂Ô∏è [2/4] Th·ª≠ kh·ªüi t·∫°o Edge t·ª± ƒë·ªông...")
        service = EdgeService(EdgeChromiumDriverManager().install())
        options = EdgeOptions()
        options.add_argument("--start-maximized")
        driver = webdriver.Edge(service=service, options=options)
        update_label(window,label,' Th√†nh c√¥ng!')
        print("‚úÖ Th√†nh c√¥ng! S·ª≠ d·ª•ng Microsoft Edge.")
        return driver
    except Exception as e:
        print(f"‚ö†Ô∏è Th·∫•t b·∫°i v·ªõi Edge: {e}")

    update_label(window,label,' Th·∫•t b·∫°i!')
    update_label(window,label,'\n Kh·ªüi t·∫°o Chrome:')
    # 3. Th·ª≠ Chrome t·ª± ƒë·ªông
    try:
        print("‚ñ∂Ô∏è [3/4] Th·ª≠ kh·ªüi t·∫°o Chrome t·ª± ƒë·ªông...")
        service = ChromeService(ChromeDriverManager().install())
        options = ChromeOptions()
        options.add_argument("--start-maximized")
        driver = webdriver.Chrome(service=service, options=options)
        update_label(window,label,' Th√†nh c√¥ng!')
        print("‚úÖ Th√†nh c√¥ng! S·ª≠ d·ª•ng Google Chrome.")
        return driver
    except Exception as e:
        print(f"‚ö†Ô∏è Th·∫•t b·∫°i v·ªõi Chrome: {e}")

    update_label(window,label,' Th·∫•t b·∫°i!')
    update_label(window,label,'\n Kh·ªüi t·∫°o Firefox:')

    # 4. Th·ª≠ Firefox t·ª± ƒë·ªông (v·ªõi logic t√¨m ki·∫øm t·ªëi ∆∞u)
    try:
        print("‚ñ∂Ô∏è [4/4] Th·ª≠ kh·ªüi t·∫°o Firefox...")
        options = FirefoxOptions()
        options.add_argument("--start-maximized")
        service = None
        
        # 4.1 Th·ª≠ c√°ch t·ª± ƒë·ªông ƒë∆°n gi·∫£n nh·∫•t
        print("   -> Th·ª≠ t√¨m Firefox t·ª± ƒë·ªông (c√°ch ti√™u chu·∫©n)...")
        try:
            service = FirefoxService(GeckoDriverManager().install())      
            driver = webdriver.Firefox(service=service, options=options)
            return driver
        except Exception:
            # 4.2 N·∫øu l·ªói, m·ªõi d√πng ƒë·∫øn h√†m t√¨m ki·∫øm n√¢ng cao
            print("   -> T√¨m ki·∫øm ti√™u chu·∫©n th·∫•t b·∫°i. Th·ª≠ t√¨m ki·∫øm n√¢ng cao...")
            firefox_path = find_firefox_executable()
            if not firefox_path:
                raise ValueError("Kh√¥ng th·ªÉ t·ª± ƒë·ªông t√¨m th·∫•y n∆°i c√†i ƒë·∫∑t Firefox.")
            
            print(f"   -> ƒê√£ t√¨m th·∫•y Firefox t·∫°i: {firefox_path}")
            options.binary_location = firefox_path
            service = FirefoxService(GeckoDriverManager().install())
            driver = webdriver.Firefox(service=service, options=options)
            update_label(window,label,' Th√†nh c√¥ng!')
            print("‚úÖ Th√†nh c√¥ng! S·ª≠ d·ª•ng Firefox.")
            return driver
    except Exception as e:
        print(f"‚ö†Ô∏è Th·∫•t b·∫°i v·ªõi Firefox: {e}")

    # T·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    update_label(window,label,' Th·∫•t b·∫°i!')
    print("‚ùå M·ªçi ph∆∞∆°ng ph√°p ƒë·ªÅu th·∫•t b·∫°i. Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng.")
    show_webdriver_error_dialog()
    return None

def web_write (edge_driver, element_by, address, value):
    '''
    Find and write value to web element
    element_by: By.XPATH or By.CSS_SELECTOR
    '''
    try:
        web_element = edge_driver.find_element(element_by, address)
        web_element.send_keys(value)
    except Exception as e:
        messagebox.showerror("loi", e)
        None

def XML_file_read(file_name, isuseAI)->defaultdict:
    ''' ƒê·ªçc file XML v√† truy xu·∫•t gi√° tr·ªã, tr·∫£ v·ªÅ th√¥ng tin h√≥a ƒë∆°n
    Args:
        file_name: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file xml.
        isuseAI: s·ª≠ d·ª•ng AI ƒë·ªÉ t√¨m th√¥ng tin h·ª£p ƒë·ªìng kh√¥ng?'''
    
    # Ph√¢n t√≠ch c√∫ ph√°p file XML
    tree = etree.parse(file_name)
    root = tree.getroot()
    thong_tin = defaultdict()

    # T√¨m th·∫ª <TTChung>
    xml_data = tree.xpath('/HDon/DLHDon/TTChung')[0]
    # L·∫•y th√¥ng tin TTChung
    thong_tin['KHHDon'] = xml_data.find('KHHDon').text
    thong_tin['SHDon'] = xml_data.find('SHDon').text
    thong_tin['NLap'] = xml_data.find('NLap').text

    # T√¨m th·∫ª <TToan> 
    xml_data = tree.xpath('/HDon/DLHDon/NDHDon/TToan')[0]
     # L·∫•y th√¥ng tin thanh toan

# Danh s√°ch c√°c th·∫ª c·∫ßn x·ª≠ l√Ω
    keys_to_process = ['TgTThue', 'TgTTTBSo', 'TgTCThue']

    for key in keys_to_process:
        # T√¨m th·∫ª t∆∞∆°ng ·ª©ng v·ªõi key
        element = xml_data.find(key)
        # Ki·ªÉm tra xem th·∫ª c√≥ t·ªìn t·∫°i kh√¥ng, sau ƒë√≥ m·ªõi d√πng walrus operator
        if element is not None and (text_value := element.text):
            thong_tin[key] = int(float(text_value))

    # T√¨m th·∫ª <NBan>
    xml_data = tree.xpath('/HDon/DLHDon/NDHDon/NBan')[0]
    # L·∫•y th√¥ng tin NBan
    thong_tin['Ten'] = xml_data.find('Ten').text
    thong_tin['MST'] = xml_data.find('MST').text

    # th√¥ng tin t√™n g√≥i v√† h·ª£p ƒë·ªìng
    # l·∫•y n·ªôi dung h√≥a ƒë∆°n
    contract_info = tree.xpath('/HDon/DLHDon/NDHDon/DSHHDVu/HHDVu/THHDVu')[0].text
    
    if isuseAI:
        response = AI_generate_content(f'T√¨m ki·∫øm th√¥ng tin trong n·ªôi dung h√≥a ƒë∆°n sau: {contract_info} '
                                'v√† tr·∫£ v·ªÅ th√¥ng tin theo t·ª´ng d√≤ng c√°c n·ªôi dung sau: '
                                'S·ªë h·ª£p ƒë·ªìng: [gi√° tr·ªã]'
                                'Ng√†y h·ª£p ƒë·ªìng: [gi√° tr·ªã]'
                                'T√™n g√≥i : [gi√° tr·ªã].'
                                'Qui t·∫Øc:'
                                '- Ch·ªâ tr·∫£ v·ªÅ 3 d√≤ng th√¥ng tin nh∆∞ tr√™n. Kh√¥ng th√™m l·ªùi ch√†o, gi·∫£i th√≠ch, ghi ch√∫ hay b·∫•t k·ª≥ k√Ω t·ª± th·ª´a n√†o. Gi√° tr·ªã n√†o kh√¥ng c√≥ th√¨ ƒë·ªÉ chu·ªói r·ªóng'
                                '- chuy·ªÉn ƒë·ªïi ng√†y th√°ng sang ƒë·ªãnh d·∫°ng dd/MM/yyyy'
                                '- S·ªë h·ª£p ƒë·ªìng: trong n·ªôi dung h√≥a ƒë∆°n, v√≠ d·ª• 406/HD-TTMLMN'
                                '- T√™n g√≥i: b∆∞·ªõc 1: t√¨m lo·∫°i h√¨nh c√¥ng vi·ªác trong ph·∫ßn n·ªôi dung h√≥a ƒë∆°n, chuy·ªÉn th√†nh m√£ vi·∫øt t·∫Øt: n·∫øu c√≥ n·ªôi dung t∆∞ v·∫•n thi·∫øt k·∫ø ho·∫∑c l·∫≠p ph∆∞∆°ng √°n th√¨ th√™m m√£ TVTK, t∆∞ v·∫•n th·∫©m tra th√¨ th√™m m√£ TVTT, gi√°m s√°t th√¨ th√™m m√£ TVGS, s·ªØa ch·ªØa th√¨ th√™m m√£ SCCT, thi c√¥ng th√¨ th√™m m√£ TC. B∆∞·ªõc 2: t√¨m m√£ g√≥i th·∫ßu ƒëi k√®m (th∆∞·ªùng c√≥ chu·ªói k√Ω t·ª± v√† s·ªë, v√≠ d·ª• 24BDCF-TA). B∆∞·ªõc 3 k·∫øt h·ª£p l·∫°i theo quy t·∫Øc [M√£ vi·∫øt t·∫Øt] [M√£ g√≥i th·∫ßu] (v√≠ d·ª• SCCT 24BDCF-TA)',
                                None,
                                False)
        if response == '':
            messagebox.showerror('L·ªói PDF_file_read', 'H·∫øt h·∫°n m·ª©c')
            return {}

        # x√≥a k√Ω t·ª± `
        response = response.replace('`','')

        i = 0
        key= ['SHDong', 'NHDong', 'Goi']
        # X·ª≠ l√Ω t·ª´ng d√≤ng
        for line in response.split('\n'):  # T√°ch chu·ªói th√†nh c√°c d√≤ng
            if line != '':    
                value = line.split(':', 1)[1].strip()  # T√°ch d√≤ng l·∫•y ph·∫ßn ph√≠a sau d·∫•u :
                thong_tin[key[i]] = value.strip()  # L∆∞u v√†o defaultdict (lo·∫°i b·ªè kho·∫£ng tr·∫Øng)
                i += 1

        # X·ª≠ l√Ω ng√†y:
        if thong_tin['NHDong']!= '':
            thong_tin['NHDong'] = datetime.strptime(thong_tin['NHDong'], "%d/%m/%Y").strftime("%Y/%m/%d")

    # # Lo·∫°i b·ªè ph·∫ßn ph·ª• l·ª•c kh·ªèi chu·ªói, x·ª≠ l√Ω c·∫£ "ph·ª• l·ª•c" v√† "Ph·ª• l·ª•c"
    # contract_info = re.sub(r", (ph·ª•|Ph·ª•) l·ª•c.*", "", contract_info, flags=re.IGNORECASE)

    #  # S·ª≠ d·ª•ng regular expression ƒë·ªÉ t√¨m s·ªë h·ª£p ƒë·ªìng (bao g·ªìm c·∫£ "Hƒê")
    # so_hop_dong_match = re.search(r"(?:Hƒê s·ªë|h·ª£p ƒë·ªìng s·ªë:)\s*(\d+\/[\w\.-]+)", contract_info)
    # thong_tin['SHDong'] = so_hop_dong_match.group(1) if so_hop_dong_match else 'None'

    # # S·ª≠ d·ª•ng regular expression ƒë·ªÉ t√¨m ng√†y h·ª£p ƒë·ªìng
    # ngay_hop_dong_match = re.search(r"ng√†y (\d{2}/\d{2}/\d{4})", contract_info)
    
    # if ngay_hop_dong_match:
    #     HD_date = datetime.strptime(ngay_hop_dong_match.group(1), "%d/%m/%Y").strftime("%Y/%m/%d")
    # else:
    #     HD_date = 'None'

    # thong_tin['NHDong'] = HD_date

    # # T√¨m lo·∫°i c√¥ng vi·ªác d·ª±a v√†o t·ª´ kh√≥a
    # loai_cong_viec = 'None'
    # if "kh·∫£o s√°t" in contract_info.lower() or "thi·∫øt k·∫ø" in contract_info.lower() or "t∆∞ v·∫•n thi·∫øt k·∫ø" in contract_info.lower():
    #     loai_cong_viec = "TVTK"
    # if "th·∫©m tra" in contract_info.lower():
    #     loai_cong_viec = "TVTT"
    # if "gi√°m s√°t" in contract_info.lower():
    #     loai_cong_viec = "TVGS"
    # if "s·ª≠a ch·ªØa" in contract_info.lower() or "s·ªØa ch·ªØa" in contract_info.lower():
    #     loai_cong_viec = "SCCT"
    # if "thi c√¥ng" in contract_info.lower():
    #    loai_cong_viec = "TC"

    # # S·ª≠ d·ª•ng regular expression ƒë·ªÉ t√¨m chu·ªói ƒë·∫∑c bi·ªát
    # chuoi_dac_biet_match = re.search(r"(\d{2}[A-Z]{2,}[A-Z\d-]{2,})", contract_info)
    # chuoi_dac_biet = chuoi_dac_biet_match.group(1) if chuoi_dac_biet_match else 'None'

    # thong_tin['Goi'] = f'{loai_cong_viec} {chuoi_dac_biet}'

        thong_tin['LinkTC']= ''
        thong_tin['MaTC']= ''

    return thong_tin

def PDF_file_read(file_name)->defaultdict:
    ''' ƒê·ªçc file PDF v√† truy xu·∫•t gi√° tr·ªã, tr·∫£ v·ªÅ th√¥ng tin h√≥a ƒë∆°n''' 

    # Chuy·ªÉn file PDF th√†nh h√¨nh ·∫£nh ƒë·ªÉ g·ª≠i Gemini ph√¢n t√≠ch
    #M·ªü file PDF
    with fitz.open(file_name) as doc:

        # L·∫•y trang ƒë·∫ßu ti√™n (ch·ªâ s·ªë trang b·∫Øt ƒë·∫ßu t·ª´ 0)
        page = doc.load_page(0)

        # Chuy·ªÉn trang th√†nh h√¨nh ·∫£nh (ƒë·ªô ph√¢n gi·∫£i 150 DPI)
        pix = page.get_pixmap(dpi=150)

        # L∆∞u h√¨nh ·∫£nh trang ƒë·∫ßu ti√™n
        pix.save('pdf.png')

    
    # response = AI_generate_content('Truy xu·∫•t th√¥ng tin t·ª´ h√¨nh ·∫£nh v√† ch·ªâ tr·∫£ v·ªÅ cho t√¥i th√¥ng tin theo t·ª´ng d√≤ng c√°c th√¥ng tin sau: '
    #                         'Ng∆∞·ªùi b√°n: [gi√° tr·ªã]'
    #                         'M√£ s·ªë thu·∫ø ng∆∞·ªùi b√°n: [gi√° tr·ªã]'
    #                         'Ng√†y h√≥a ƒë∆°n (ƒë·ªãnh d·∫°ng dd/MM/yyyy): [gi√° tr·ªã]'
    #                         'K√Ω hi·ªáu: [gi√° tr·ªã]'
    #                         'S·ªë: [gi√° tr·ªã]'
    #                         'S·ªë ti·ªÅn ch∆∞a thu·∫ø: [gi√° tr·ªã]'
    #                         'S·ªë ti·ªÅn thu·∫ø: [gi√° tr·ªã]'
    #                         'S·ªë ti·ªÅn sau thu·∫ø: [gi√° tr·ªã]'
    #                         'Link tra c·ª©u h√≥a ƒë∆°n: [gi√° tr·ªã]'
    #                         'M√£ b√≠ m·∫≠t tra c·ª©u: [gi√° tr·ªã]'
    #                         'S·ªë h·ª£p ƒë·ªìng (trong n·ªôi dung h√≥a ƒë∆°n, v√≠ d·ª• 406/HD-TTMLMN): [gi√° tr·ªã]'
    #                         'Ng√†y h·ª£p ƒë·ªìng (ƒë·ªãnh d·∫°ng dd/MM/yyyy): [gi√° tr·ªã]'
    #                         'T√™n g√≥i : [gi√° tr·ªã].'
    #                         'L∆∞u √Ω ch·ªï t√™n g√≥i: ch·ªâ l·∫•y t·ª´ vi·∫øt t·∫Øt c·ªßa g√≥i, v√† th√™m v√†o m√£ ph√≠a tr∆∞·ªõc t√™n g√≥i n·∫øu trong n·ªôi dung h√≥a d∆°n c√≥ t·ª´ kh·∫£o s√°t thi·∫øt k·∫ø th√¨ th√™m m√£ TVTK, th·∫©m tra th√¨ th√™m m√£ TVTT, gi√°m s√°t th√¨ th√™m m√£ TVGS, s·ªØa ch·ªØa th√¨ th√™m m√£ SCCT, thi c√¥ng th√¨ th√™m m√£ TC, V√≠ du: SCCT 24BDCF-TA'
    #                         'L∆∞u √Ω: s·ªë ti·ªÅn c√≥ th·ªÉ l√† s·ªë √¢m, n·∫øu d√≤ng n√†o kh√¥ng t√¨m ƒë∆∞·ª£c th√¨ v·∫´n tr·∫£ k·∫øt qu·∫£ chu·ªói r·ªóng, kh√¥ng th√™m b·∫•t c·ª© k√Ω t·ª± g√¨ ngo√†i c√∫ ph√°p tr√™n',
    #                         'pdf.png',
    #                         True)

    response = AI_generate_content('B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n v·ªÅ x·ª≠ l√Ω v√† tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ h√¨nh ·∫£nh h√≥a ƒë∆°n ƒëi·ªán t·ª≠ c·ªßa Vi·ªát Nam, B·∫°n ph√¢n t√≠ch h√¨nh ·∫£nh h√≥a ƒë∆°n ƒë∆∞·ª£c cung c·∫•p v√† tr·∫£ v·ªÅ th√¥ng tin m·ªôt c√°ch ch√≠nh x√°c theo ƒë√∫ng ƒë·ªãnh d·∫°ng v√† c√°c quy t·∫Øc ƒë∆∞·ª£c n√™u d∆∞·ªõi ƒë√¢y: '
                            'Ng∆∞·ªùi b√°n: [gi√° tr·ªã]'
                            'M√£ s·ªë thu·∫ø ng∆∞·ªùi b√°n: [gi√° tr·ªã]'
                            'Ng√†y h√≥a ƒë∆°n: [gi√° tr·ªã]'
                            'K√Ω hi·ªáu: [gi√° tr·ªã]'
                            'S·ªë: [gi√° tr·ªã]'
                            'S·ªë ti·ªÅn ch∆∞a thu·∫ø: [gi√° tr·ªã]'
                            'S·ªë ti·ªÅn thu·∫ø: [gi√° tr·ªã]'
                            'S·ªë ti·ªÅn sau thu·∫ø: [gi√° tr·ªã]'
                            'Link tra c·ª©u h√≥a ƒë∆°n: [gi√° tr·ªã]'
                            'M√£ tra c·ª©u ho·∫∑c m√£ nh·∫≠n h√≥a ƒë∆°n: [gi√° tr·ªã]'
                            'S·ªë h·ª£p ƒë·ªìng: [gi√° tr·ªã]'
                            'Ng√†y h·ª£p ƒë·ªìng: [gi√° tr·ªã]'
                            'T√™n g√≥i : [gi√° tr·ªã].'
                            'Qui t·∫Øc:'
                            '- Ch·ªâ tr·∫£ v·ªÅ 13 d√≤ng th√¥ng tin nh∆∞ tr√™n. Kh√¥ng th√™m l·ªùi ch√†o, gi·∫£i th√≠ch, ghi ch√∫ hay b·∫•t k·ª≥ k√Ω t·ª± th·ª´a n√†o. Gi√° tr·ªã n√†o kh√¥ng c√≥ th√¨ ƒë·ªÉ chu·ªói r·ªóng'
                            '- s·ªë ti·ªÅn c√≥ th·ªÉ l√† s·ªë √¢m, gi·ªØ nguy√™n d·∫•u'
                            '- chuy·ªÉn ƒë·ªïi ng√†y th√°ng sang ƒë·ªãnh d·∫°ng dd/MM/yyyy'
                            '- S·ªë h·ª£p ƒë·ªìng: trong n·ªôi dung h√≥a ƒë∆°n, v√≠ d·ª• 406/HD-TTMLMN'
                            '- T√™n g√≥i: tr√≠ch xu·∫•t n·ªôi dung h√≥a ƒë∆°n trong ph·∫ßn t√™n h√†ng h√≥a, d·ªãch v·ª• (th∆∞·ªùng ·ªü ph√≠a ƒë·∫ßu, tr√°nh nh·∫ßm l·∫´n v·ªõi t√™n c√¥ng vi·ªác), b∆∞·ªõc 1: t√¨m lo·∫°i h√¨nh c√¥ng vi·ªác trong ph·∫ßn n·ªôi dung h√≥a ƒë∆°n, chuy·ªÉn th√†nh m√£ vi·∫øt t·∫Øt: n·∫øu c√≥ n·ªôi dung t∆∞ v·∫•n thi·∫øt k·∫ø ho·∫∑c t∆∞ v·∫•n l·∫≠p ph∆∞∆°ng √°n th√¨ th√™m m√£ TVTK, t∆∞ v·∫•n th·∫©m tra th√¨ th√™m m√£ TVTT, gi√°m s√°t th√¨ th√™m m√£ TVGS, s·ªØa ch·ªØa th√¨ th√™m m√£ SCCT, thi c√¥ng th√¨ th√™m m√£ TC. B∆∞·ªõc 2: t√¨m m√£ g√≥i th·∫ßu ƒëi k√®m (th∆∞·ªùng c√≥ chu·ªói k√Ω t·ª± v√† s·ªë, v√≠ d·ª• 24BDCF-TA). B∆∞·ªõc 3 k·∫øt h·ª£p l·∫°i theo quy t·∫Øc [M√£ vi·∫øt t·∫Øt] [M√£ g√≥i th·∫ßu] (v√≠ d·ª• SCCT 24BDCF-TA)',
                            'pdf.png',
                            True)
    if response == '':
        messagebox.showerror('L·ªói PDF_file_read', 'H·∫øt h·∫°n m·ª©c')
        return {}

    # x√≥a k√Ω t·ª± `
    response = response.replace('`','')

    i = 0
    thong_tin = defaultdict()
    key= ['Ten','MST', 'NLap', 'KHHDon', 'SHDon','TgTCThue', 'TgTThue', 'TgTTTBSo', 'LinkTC', 'MaTC', 'SHDong', 'NHDong', 'Goi']
    # X·ª≠ l√Ω t·ª´ng d√≤ng
    for line in response.split('\n'):  # T√°ch chu·ªói th√†nh c√°c d√≤ng
        if line != '':    
            value = line.split(':', 1)[1].strip()  # T√°ch d√≤ng l·∫•y ph·∫ßn ph√≠a sau d·∫•u :
            thong_tin[key[i]] = value.strip()  # L∆∞u v√†o defaultdict (lo·∫°i b·ªè kho·∫£ng tr·∫Øng)
            i += 1

    # B·ªè s·ªë 1 ·ªü k√Ω hi·ªáu h√≥a ƒë∆°n
    thong_tin['KHHDon'] = thong_tin['KHHDon'][1:]

    # X·ª≠ l√Ω s·ªë
    # Danh s√°ch c√°c key c·∫ßn x·ª≠ l√Ω s·ªë
    numeric_keys = ['TgTThue', 'TgTTTBSo', 'TgTCThue']

    for key in numeric_keys:
        # D√πng .get(key) ƒë·ªÉ tr√°nh l·ªói n·∫øu key kh√¥ng t·ªìn t·∫°i
        value = thong_tin.get(key)
        
        # Ki·ªÉm tra xem gi√° tr·ªã c√≥ t·ªìn t·∫°i v√† kh√¥ng r·ªóng kh√¥ng
        if value:
            # Th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi v√† g√°n l·∫°i gi√° tr·ªã
            cleaned_value = str(value).replace('.', '').replace(',', '.')
            thong_tin[key] = int(float(cleaned_value))

    # X·ª≠ l√Ω ng√†y:
    if thong_tin['NHDong']:
        thong_tin['NHDong'] = datetime.strptime(thong_tin['NHDong'], "%d/%m/%Y").strftime("%Y/%m/%d")
    thong_tin['NLap'] = datetime.strptime(thong_tin['NLap'], "%d/%m/%Y").strftime("%Y/%m/%d")

    return thong_tin

def update_label(window, label, new_text, append=True):
  """C·∫≠p nh·∫≠t n·ªôi dung c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng Label.

  Args:
      window: C·ª≠a s·ªï ch√≠nh ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán (window.update_idletasks).
      label: ƒê·ªëi t∆∞·ª£ng label c·∫ßn c·∫≠p nh·∫≠t.
      new_text: N·ªôi dung m·ªõi ƒë·ªÉ hi·ªÉn th·ªã.
      append (bool): N·∫øu True, n·ªôi dung m·ªõi s·∫Ω ƒë∆∞·ª£c n·ªëi v√†o n·ªôi dung c≈©.
                     N·∫øu False, n·ªôi dung c≈© s·∫Ω b·ªã x√≥a v√† thay th·∫ø b·∫±ng n·ªôi dung m·ªõi.
                     M·∫∑c ƒë·ªãnh l√† True.
  """
  if append:
    # N·ªëi n·ªôi dung m·ªõi v√†o n·ªôi dung hi·ªán t·∫°i
    current_text = label.cget("text")
    updated_text = current_text + new_text
    label.config(text=updated_text)
  else:
    # Thay th·∫ø ho√†n to√†n n·ªôi dung c≈©
    label.config(text=new_text)
  
  window.update_idletasks()

def to_time_from_df(value):
    date_obj = datetime.strptime(str(value), "%Y-%m-%d %H:%M:%S")
    return date_obj.strftime("%d/%m/%Y")

def find_xml_file(pdf_file_path, pdf_info ):
    """
    T√¨m file XML t∆∞∆°ng ·ª©ng v·ªõi file PDF.

    Args:
        pdf_file_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF.

    Returns:
        str: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file XML, ho·∫∑c chu·ªói r·ªóng n·∫øu kh√¥ng t√¨m th·∫•y.
    """
    try:
        # T√¨m file XML theo t√™n file
        xml_file_path = find_xml_file_by_name(pdf_file_path)
        if xml_file_path:
            return xml_file_path

        # N·∫øu kh√¥ng t√¨m th·∫•y theo t√™n, t√¨m theo n·ªôi dung
        return find_xml_file_by_content(pdf_file_path, pdf_info)

    except Exception as e:
        print(f"Error finding XML file: {e}")
        return ""

def find_xml_file_by_name(pdf_file_path):
    """T√¨m file XML theo t√™n file."""
    try:
        pdf_file_name = os.path.splitext(os.path.basename(pdf_file_path))[0]
        pdf_dir = os.path.dirname(pdf_file_path)
        xml_file_path = glob.glob(os.path.join(pdf_dir, f"{pdf_file_name}*.xml"))
        if xml_file_path:
            return xml_file_path[0].replace("/", "\\")
        return ""
    except Exception as e:
        print(f"Error finding XML file by name: {e}")
        return ""

def find_xml_file_by_content(pdf_file_path, pdf_info):
    """T√¨m file XML theo n·ªôi dung."""
    try:
        # L·∫•y th∆∞ m·ª•c ch·ª©a file PDF
        pdf_dir = os.path.dirname(pdf_file_path)

        # T√¨m t·∫•t c·∫£ c√°c file XML trong th∆∞ m·ª•c v√† th∆∞ m·ª•c con
        for xml_file in glob.glob(os.path.join(pdf_dir, "**/*.xml"), recursive=True):
            try:
                tree = etree.parse(xml_file)
                xml_data = tree.xpath('/HDon/DLHDon/TTChung')[0]

                # So s√°nh th√¥ng tin
                if (xml_data.find('KHHDon').text == pdf_info['KHHDon'] and
                    xml_data.find('SHDon').text == pdf_info['SHDon']):
                    return xml_file.replace("/", "\\")
            except Exception as e:
                print(f"Error processing XML file {xml_file}: {e}")
                
        return ""  # Kh√¥ng t√¨m th·∫•y file XML ph√π h·ª£p

    except Exception as e:
        print(f"Error finding XML file by content: {e}")
        return ""
def find_file(file_name):
    """T√¨m ki·∫øm m·ªôt file trong th∆∞ m·ª•c g·ªëc c·ªßa ·ª©ng d·ª•ng v√† c√°c th∆∞ m·ª•c con.
    Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß n·∫øu t√¨m th·∫•y, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ None.
    """
    app_dir = get_app_path()
    
    file_path = None
    for root, dirs, files in os.walk(app_dir):
        if file_name in files:
            file_path = os.path.join(root, file_name)
            break
    return file_path

def get_app_path():
    """Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a ·ª©ng d·ª•ng."""
    if getattr(sys, 'frozen', False):
        # N·∫øu ƒëang ch·∫°y t·ª´ file .exe
        return os.path.dirname(sys.executable)
    else:
        # N·∫øu ƒëang ch·∫°y t·ª´ file .py
        return os.path.dirname(os.path.realpath(__file__))